//SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

//Insert, update, read from array of structs
contract TodoList{
    struct Todo{
        string text;
        bool completed;
    }

    Todo[] public todos;

    function create(string calldata _text) external {
        todos.push(Todo({
            text: _text,
            completed: false
        }));
    } //Insert a new to-do

    function updateText(uint _index, string calldata _text) external{
        //1st way to update => cheaper in gas IF we update only one value in struct
        todos[_index].text = _text;

        /*//2nd way to update => cheaper way in gas IF we update multiple values 
        Todo storage todo = todos[_index];
        todo.text = _text;*/
    } //Update the text of to-do

    function get(uint _index) external view returns (string memory, bool){ 
        //we don't really need this function because of solidity but still, we can use it
        
        //Storage = 29397 gas used
        //Memory = 29480 gas used
        
        Todo storage todo = todos[_index];
        return(todo.text, todo.completed);
    } //Get the data stored inside a to-do

    function toggleCompleted(uint _index) external{
        todos[_index].completed = !todos[_index].completed;
    }
}